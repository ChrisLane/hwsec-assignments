#!/usr/bin/python
import serial

LN_SIZE_BIT = 1024
LN_SIZE = LN_SIZE_BIT/8
BLOCK_SIZE = 16
BLOCK_CNT = LN_SIZE/BLOCK_SIZE
CPU_FREQUENCY = 8e6

#COM_PORT = 'com22'
COM_PORT = '/dev/ttyACM1'
BAUDRATE = 9600

ser = serial.Serial(COM_PORT, BAUDRATE, timeout=1)

# Test vectors
tv_a = [

# 0
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 

# 1
0xe6, 0x5a, 0xaa, 0x67, 0xf1, 0x92, 0x53, 0x5d, 0x87, 0x6b, 0xf5, 0x71, 0x7b, 0x58, 0x20, 0xf1, 0xfe, 0xbb, 0x87, 0xc8, 0x5b, 0x27, 0x93, 0x9f, 0x74, 0x7, 0xd5, 0x56, 0x3d, 0x41, 0x6f, 0x5d, 0xa, 0x92, 0xa0, 0x4b, 0xbb, 0x66, 0xd5, 0x43, 0xb4, 0x87, 0x44, 0x5c, 0x2, 0x5, 0x32, 0xfd, 0xf3, 0x3e, 0x27, 0x79, 0xd0, 0x80, 0xb, 0x82, 0xd1, 0x83, 0xa1, 0xc5, 0xe7, 0xd0, 0xdc, 0xe1, 0x55, 0x26, 0x54, 0x71, 0xb7, 0x0, 0x98, 0xb8, 0xaf, 0x74, 0x3f, 0x15, 0x2, 0x9a, 0x8b, 0x9, 0xee, 0xcf, 0x32, 0x6, 0x39, 0xd, 0x9f, 0xe9, 0x63, 0x37, 0x83, 0xc9, 0xf9, 0x19, 0xbf, 0xa, 0x4e, 0x6d, 0xe, 0x2d, 0xaa, 0xe1, 0xca, 0x23, 0xc0, 0xcf, 0x29, 0xc0, 0x6b, 0xcf, 0xfc, 0x82, 0x6f, 0xe6, 0x73, 0x19, 0xfa, 0x3c, 0xb7, 0x2, 0x1d, 0xf0, 0x54, 0x9a, 0x4d, 0x30, 0x64, 0x94, 

# 2
0x94, 0x27, 0x38, 0xa1, 0xd8, 0xe3, 0xc0, 0x21, 0x92, 0xa9, 0xf7, 0x8c, 0xbf, 0x48, 0x3, 0x38, 0xaf, 0x30, 0xf6, 0x69, 0xfd, 0x8c, 0x95, 0x3e, 0xc7, 0xca, 0xc2, 0xfc, 0x63, 0xd2, 0x96, 0xde, 0x4c, 0xef, 0x3f, 0x41, 0x39, 0x2e, 0xcd, 0xbb, 0xee, 0x5a, 0x65, 0x1b, 0xbf, 0xad, 0x41, 0x18, 0x2f, 0xb4, 0xe, 0x1, 0xd3, 0x5, 0xf4, 0xc8, 0xcc, 0x1d, 0x4b, 0x9f, 0x6f, 0x3a, 0x65, 0x49, 0x1c, 0x87, 0x62, 0xbc, 0x72, 0xdf, 0xac, 0x94, 0xe4, 0xc, 0xcd, 0xdc, 0xd9, 0x3c, 0xc3, 0xb9, 0x77, 0x5c, 0xfa, 0x21, 0x8a, 0xb1, 0xc1, 0x6c, 0xd5, 0xba, 0x65, 0x18, 0x96, 0xa2, 0x5f, 0x44, 0x63, 0xd, 0x8a, 0x90, 0x9e, 0xa6, 0xe5, 0xbb, 0x74, 0x1, 0x57, 0x48, 0x5b, 0x88, 0x26, 0xb, 0x8e, 0xd1, 0xc7, 0x36, 0x11, 0x69, 0xb7, 0x40, 0xb0, 0x73, 0xd2, 0x59, 0xf2, 0x60, 0xf0, 0x79, 

# 3
0x4, 0x8c, 0x97, 0x6d, 0x8a, 0xf4, 0x5c, 0xad, 0x84, 0x3e, 0xf4, 0xc6, 0xe9, 0x55, 0xee, 0xbf, 0x27, 0xdf, 0x91, 0x89, 0xcd, 0x63, 0xde, 0x8e, 0xbb, 0x9c, 0x89, 0xee, 0x3, 0xe7, 0x27, 0xa8, 0xb6, 0x71, 0xdd, 0x47, 0xb7, 0x9d, 0xda, 0x3, 0x50, 0x26, 0xe5, 0x2d, 0x35, 0x3c, 0xd7, 0xb1, 0x21, 0xae, 0x97, 0x64, 0x84, 0xc1, 0xd0, 0xc5, 0xbe, 0x7c, 0xb8, 0xd2, 0xba, 0x6, 0x1f, 0x11, 0x2c, 0xe5, 0x3c, 0x73, 0x3f, 0xf2, 0xfa, 0xa3, 0x1e, 0xaa, 0xc, 0xcf, 0xe1, 0x3d, 0xe6, 0xf4, 0x80, 0x7f, 0x6b, 0x2, 0x1a, 0x29, 0xd5, 0xe5, 0xd2, 0xb2, 0xc1, 0x78, 0xdc, 0x78, 0x76, 0x7d, 0x65, 0x6e, 0xd, 0xda, 0xde, 0xe7, 0xbc, 0x87, 0x89, 0xcb, 0xa4, 0xdf, 0xf9, 0xee, 0x4e, 0xf3, 0x3c, 0xf1, 0x8, 0xc4, 0xa1, 0x4f, 0x5b, 0x58, 0x39, 0xf7, 0x11, 0x42, 0x3f, 0xd3, 0x15, 0xd5, 


]

tv_b = [

# 0
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 

# 1
0x2d, 0x56, 0x5f, 0x82, 0x84, 0xd9, 0x40, 0x15, 0xb8, 0x53, 0x59, 0x5e, 0x64, 0x62, 0x36, 0x8a, 0x2e, 0xae, 0xb7, 0xa4, 0xa3, 0x40, 0xdb, 0xed, 0xc, 0xb9, 0x41, 0x18, 0x6b, 0x27, 0x7, 0x25, 0x2f, 0x8f, 0x32, 0x6c, 0x43, 0xb8, 0x9, 0xa7, 0x72, 0x7, 0xe3, 0xdf, 0xa9, 0xce, 0xb3, 0xdd, 0x62, 0xb8, 0x8b, 0x1, 0xf7, 0x44, 0xea, 0x3e, 0xfc, 0x4f, 0x88, 0x79, 0xce, 0x98, 0x13, 0x27, 0xdb, 0x91, 0xc3, 0xb1, 0x57, 0xc4, 0xc5, 0x62, 0xc4, 0xae, 0x6d, 0xa9, 0xcc, 0xef, 0x9b, 0xb9, 0x97, 0x3f, 0x93, 0x22, 0xe, 0x51, 0xe1, 0xd5, 0xaa, 0x8f, 0xd7, 0x9b, 0x19, 0xd5, 0xea, 0x52, 0xbf, 0x32, 0x39, 0xd6, 0x95, 0xb, 0xe7, 0x9e, 0xcb, 0x5b, 0xe4, 0x27, 0x7e, 0x41, 0x9, 0x4a, 0xf, 0x96, 0xa2, 0x5a, 0x7, 0xce, 0x7f, 0xf5, 0x9b, 0x57, 0xd0, 0x16, 0x86, 0xb9, 0xd9, 0x11, 

# 2
0x4a, 0xcb, 0x96, 0xf, 0x94, 0x90, 0x35, 0x1f, 0xbd, 0x2c, 0xb9, 0xc0, 0xd, 0xf1, 0xe9, 0xbf, 0x64, 0x6, 0xfe, 0x51, 0x1c, 0x5d, 0xdc, 0xfc, 0xd, 0x43, 0xa8, 0xfa, 0xc7, 0xc, 0xf4, 0x2c, 0x42, 0x88, 0xe4, 0xdc, 0xc, 0x5a, 0xb8, 0xe0, 0x34, 0xef, 0xec, 0x57, 0xc1, 0x4d, 0x1, 0xce, 0xa4, 0xb, 0x35, 0xa5, 0x49, 0x85, 0x2, 0xc9, 0x49, 0x99, 0x19, 0x7, 0x1a, 0x95, 0x83, 0xae, 0x29, 0xd0, 0xfd, 0xa6, 0xab, 0x57, 0x4e, 0x48, 0x62, 0x4a, 0x92, 0x41, 0xc6, 0xb9, 0x1c, 0xb4, 0xa3, 0x48, 0x1b, 0xdf, 0xb5, 0xf9, 0xbb, 0x42, 0x5, 0xcf, 0x4d, 0x61, 0xce, 0xaa, 0xb9, 0xb6, 0xa6, 0x58, 0x9e, 0x67, 0xea, 0x45, 0x62, 0x65, 0x3b, 0xd3, 0x17, 0x82, 0x6a, 0xf, 0x58, 0x2e, 0x1e, 0xbf, 0xf4, 0xc9, 0x1a, 0x26, 0x19, 0xe2, 0x1c, 0xcb, 0x36, 0xcc, 0x24, 0x47, 0x57, 0xd3, 

# 3
0x8b, 0x1c, 0x42, 0x39, 0x5, 0x4b, 0x8, 0x60, 0x92, 0x4e, 0x80, 0x93, 0x15, 0x4b, 0xbd, 0xb0, 0x14, 0x2c, 0xc0, 0x80, 0x50, 0xfb, 0xdb, 0x75, 0xb5, 0x54, 0x33, 0x9b, 0x7a, 0xd3, 0xe3, 0x90, 0xee, 0x18, 0x29, 0x42, 0x57, 0xa, 0x92, 0xf0, 0xd8, 0xf6, 0x73, 0x94, 0xc, 0xc3, 0x1c, 0x23, 0x2b, 0x5a, 0xe7, 0x10, 0x11, 0xf2, 0x7a, 0xf8, 0x4c, 0x49, 0x5a, 0x7c, 0x88, 0x26, 0xbf, 0xa1, 0xb, 0xb7, 0x3e, 0xf8, 0x42, 0x1e, 0xcf, 0x47, 0x17, 0xcd, 0x69, 0x14, 0xd0, 0xe8, 0x19, 0x85, 0x43, 0xf6, 0x6c, 0x7a, 0xb1, 0x2c, 0x59, 0x2d, 0x32, 0x99, 0x28, 0x70, 0xd5, 0x60, 0x85, 0xad, 0xc2, 0xed, 0xd4, 0x1c, 0xc, 0x7b, 0xc4, 0xed, 0xfb, 0x6, 0xde, 0x2e, 0xbb, 0x9a, 0xe, 0x80, 0x1f, 0xe9, 0xb2, 0x30, 0x58, 0xfb, 0x66, 0x2f, 0xf7, 0xfb, 0x4c, 0x47, 0x7c, 0x9d, 0xa8, 0x2e, 

]


TV_COUNT = len(tv_a) / LN_SIZE

def unpack_le(s):
    return sum((s[i]) << (8 * i) for i in range(len(s)))
    
def pack_le(s, n):
    r = []

    for i in range(n):
        r.append(int((s >> (8 * i)) & 0xff))

    return r
    
def buf2hex(b):
    return ''.join('{:02x} '.format(ord(x)) for x in b).upper()

def array2hex(b):
    return ''.join('{:02x} '.format(x) for x in b).upper()
    
def array2buf(b):
    bb = ""
    
    for i in range(len(b)):
        bb += chr(b[i])

    return bb

for tv in range(TV_COUNT):
    print "== Test " + str(tv)
    
    a_curr = tv_a[(tv*LN_SIZE):((tv + 1)*LN_SIZE)]
    b_curr = tv_b[(tv*LN_SIZE):((tv + 1)*LN_SIZE)]
    
    # Compute reference result
    aN = unpack_le(a_curr)
    bN = unpack_le(b_curr)
    cN = aN + bN
    
    # Convert & truncate to one LN
    c_ref = pack_le(cN, LN_SIZE)    
        
    # Send operand block A
    for j in range(BLOCK_CNT):
        buf = array2buf(a_curr[j*BLOCK_SIZE:(j+1)*BLOCK_SIZE])
        
        ser.write("a")
        ser.write(buf)
        
        # read response
        rx = ser.read(2)
        #print "RX: " + buf2hex(rx)  
        
        print "A = " + buf2hex(buf)
        
     # Send operand block B
    for j in range(BLOCK_CNT):
        buf = array2buf(b_curr[j*BLOCK_SIZE:(j+1)*BLOCK_SIZE])
        
        ser.write("b")
        ser.write(buf)
        
        # read response
        rx = ser.read(2)
        #print "RX: " + buf2hex(rx)  
        
        print "B = " + buf2hex(buf)    

    # Do operation
    ser.write("e")

    # Get answer
    rx = ser.read(10)
    rx_list = map(ord, rx)
   
    # duration in CPU cycles and seconds
    duration = unpack_le(rx_list[2:])

    print "RX: " + buf2hex(rx)  
    print 
    print "=== Cycle count = " + str(duration) + " = " + str(duration/CPU_FREQUENCY) + " s ==="
    print 
    
    # Get result blocks
    c_comp = []
    for j in range(BLOCK_CNT):
        # get one block        
        ser.write("o")
        
        # read response
        rx = ser.read(BLOCK_SIZE + 2)
        rx_list = map(ord, rx)
        c_comp.extend(rx_list[:BLOCK_SIZE])
        
        print "C = "+ array2hex(rx_list[:BLOCK_SIZE])

    cCompN = unpack_le(c_comp)
    cRefN = unpack_le(c_ref)
    
    if cCompN == cRefN:
        print "[OK] Result correct"
    else:
        print "[FAILED]"
        print "Got  : " + hex(cCompN)
        print "Exp't: " + hex(cRefN)
     
    print       

ser.close()
