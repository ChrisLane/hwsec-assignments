#!/usr/bin/python
import serial

LN_SIZE_BIT = 1024
LN_SIZE = LN_SIZE_BIT/8
E_SIZE = 2
BLOCK_SIZE = 16
BLOCK_CNT = LN_SIZE/BLOCK_SIZE
MU_SIZE = LN_SIZE + BLOCK_SIZE
CPU_FREQUENCY = 8e6

#COM_PORT = 'com22'
COM_PORT = '/dev/ttyACM1'
BAUDRATE = 9600

# higher timeout due to slow computation ...
ser = serial.Serial(COM_PORT, BAUDRATE, timeout=2)

# Test vectors
tv_s = [
# 0
0x33, 0xc1, 0x56, 0xb, 0xb7, 0x57, 0xd5, 0x4b, 0x62, 0x9d, 0xce, 0xf8, 0xf3, 0x9c, 0x20, 0x82, 0xf2, 0xc1, 0x4e, 0x90, 0x29, 0x2d, 0xb1, 0xe7, 0xb7, 0xa4, 0xea, 0xfe, 0x2f, 0x29, 0x7f, 0xd1, 0x8d, 0xd8, 0xb9, 0x61, 0x9f, 0x13, 0x4, 0x3, 0xb9, 0x70, 0x1e, 0xa6, 0x52, 0xaf, 0xc7, 0xcc, 0x3f, 0x95, 0x3c, 0x2f, 0x2e, 0x2b, 0x92, 0x9a, 0x25, 0x25, 0xc7, 0xe2, 0x74, 0xef, 0xb3, 0x92, 0x36, 0xc8, 0x1e, 0x5a, 0xb7, 0x65, 0x86, 0x24, 0x8a, 0x2c, 0xa, 0x3, 0x1d, 0xce, 0xe1, 0x5c, 0xd1, 0xe8, 0x6, 0x9a, 0x13, 0xdc, 0xc4, 0x1b, 0x83, 0xdb, 0xb5, 0xb7, 0xfd, 0x3d, 0x15, 0x24, 0x68, 0xa7, 0xd0, 0xd1, 0xca, 0xcb, 0x65, 0x44, 0x92, 0x36, 0x4e, 0x9d, 0xa9, 0x17, 0x50, 0x93, 0x88, 0xaa, 0x7a, 0xfb, 0xea, 0xef, 0x43, 0xc, 0x14, 0x83, 0xd8, 0x15, 0xf, 0xc0, 0xe6, 0x5d, 

]

tv_n = [
0x5, 0x54, 0xc9, 0xbb, 0xb0, 0x31, 0x9d, 0xf4, 0x4a, 0x4c, 0x3, 0xcc, 0x76, 0xc2, 0x66, 0x5b, 0x4c, 0xae, 0xa9, 0x54, 0x18, 0x3d, 0x61, 0x70, 0x88, 0xf2, 0x8e, 0xb8, 0xe7, 0xc3, 0x2c, 0x2a, 0xe1, 0x56, 0x6f, 0x7e, 0xc3, 0xae, 0xca, 0xe, 0x47, 0x3d, 0x96, 0x20, 0x7b, 0x31, 0xd8, 0x22, 0x79, 0xe5, 0x72, 0x0, 0x62, 0x96, 0xbb, 0x27, 0xd4, 0x9c, 0x4d, 0x51, 0xac, 0x6a, 0x87, 0x4e, 0xa9, 0x27, 0xd6, 0x7a, 0x8e, 0x65, 0x82, 0xb7, 0xd4, 0x43, 0xf8, 0xc2, 0xe2, 0x8f, 0x3d, 0xb1, 0xe5, 0x1e, 0xbe, 0x4f, 0xef, 0xae, 0x1, 0x9a, 0x30, 0x85, 0xc8, 0x4d, 0x20, 0x29, 0x75, 0x6d, 0x25, 0xf8, 0x74, 0xfe, 0xd, 0x44, 0xec, 0x1, 0x85, 0x29, 0xd, 0x59, 0x17, 0xba, 0xa3, 0x2e, 0x3c, 0x98, 0x68, 0xa2, 0x57, 0xa8, 0x63, 0xe2, 0xd4, 0x25, 0xc7, 0xd1, 0x4b, 0x1c, 0x5b, 0xbc, 

]

tv_mu = [
0x7f, 0xc3, 0xe3, 0xe4, 0xe, 0xbd, 0xd3, 0x56, 0x48, 0xaf, 0xcf, 0x90, 0x57, 0xc1, 0xaf, 0xca, 0xa6, 0x52, 0x76, 0x1a, 0x22, 0x4e, 0x7d, 0xb1, 0xc7, 0xd2, 0xf1, 0x51, 0xa0, 0x6b, 0xab, 0xc2, 0x29, 0x2, 0x2e, 0x95, 0xc1, 0xc8, 0xa, 0xed, 0xe6, 0x8e, 0xc4, 0xbc, 0x67, 0x26, 0x9a, 0x5e, 0x26, 0x13, 0x49, 0x6a, 0x72, 0x7b, 0x6d, 0xc1, 0xff, 0x26, 0x6d, 0x57, 0x8a, 0x23, 0x5f, 0xb7, 0xa5, 0xd9, 0x38, 0xe0, 0x47, 0x44, 0x5a, 0xba, 0xef, 0xbf, 0x5e, 0x7e, 0xf, 0x98, 0x1c, 0xab, 0xff, 0x10, 0x54, 0x6e, 0x42, 0x0, 0x61, 0x56, 0xa0, 0x99, 0x5f, 0x92, 0x2e, 0xb9, 0xf6, 0x1f, 0x12, 0x0, 0x81, 0xe1, 0xc1, 0x31, 0x6e, 0xed, 0xf3, 0x65, 0x44, 0xb2, 0xdd, 0x2b, 0x9f, 0x1d, 0x54, 0x43, 0xce, 0x59, 0x71, 0x89, 0x1f, 0xe9, 0xd5, 0x23, 0xba, 0x1a, 0xc5, 0xe3, 0xef, 0x5b, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 

]

tv_e = [
0x11, 0x0, 
]

TV_COUNT = len(tv_n) / LN_SIZE

def unpack_le(s):
    return sum((s[i]) << (8 * i) for i in range(len(s)))
    
def pack_le(s, n):
    r = []

    for i in range(n):
        r.append(int((s >> (8 * i)) & 0xff))

    return r
    
def buf2hex(b):
    return ''.join('{:02x} '.format(ord(x)) for x in b).upper()

def array2hex(b):
    return ''.join('{:02x} '.format(x) for x in b).upper()
    
def array2buf(b):
    bb = ""
    
    for i in range(len(b)):
        bb += chr(b[i])

    return bb

for tv in range(TV_COUNT):
    print "== Test " + str(tv)
    
    s_curr = tv_s[(tv*LN_SIZE):((tv + 1)*LN_SIZE)]
    n_curr = tv_n[(tv*LN_SIZE):((tv + 1)*LN_SIZE)]
    mu_curr = tv_mu[(tv*MU_SIZE):((tv + 1)*MU_SIZE)]
    e_curr = tv_e[(tv*E_SIZE):((tv + 1)*E_SIZE)]
    
    # Compute reference result
    sN = unpack_le(s_curr)
    nN = unpack_le(n_curr)
    eN = unpack_le(e_curr)
     
    cN = pow(sN, eN, nN)
    
    # Convert & truncate to one LN
    c_ref = pack_le(cN, LN_SIZE)    
        
    # Send operand block s
    for j in range(BLOCK_CNT):
        buf = array2buf(s_curr[j*BLOCK_SIZE:(j+1)*BLOCK_SIZE])
        
        ser.write("s")
        ser.write(buf)
        
        # read response
        rx = ser.read(2)
        #print "RX: " + buf2hex(rx)  
        
        print "s = " + buf2hex(buf)
        
     # Send operand block n
    for j in range(BLOCK_CNT):
        buf = array2buf(n_curr[j*BLOCK_SIZE:(j+1)*BLOCK_SIZE])
        
        ser.write("n")
        ser.write(buf)
        
        # read response
        rx = ser.read(2)
        #print "RX: " + buf2hex(rx)  
        
        print "n = " + buf2hex(buf)  
        
       # Send operand block mu
    for j in range(BLOCK_CNT + 1):
        buf = array2buf(mu_curr[j*BLOCK_SIZE:(j+1)*BLOCK_SIZE])
        
        ser.write("m")
        ser.write(buf)
        
        # read response
        rx = ser.read(2)
        #print "RX: " + buf2hex(rx)  
        
        print "mu = " + buf2hex(buf)   

    # Do operation
    ser.write("e")
    ser.write(array2buf(e_curr))
    
    # Get answer
    rx = ser.read(10)
    rx_list = map(ord, rx)
   
    # duration in CPU cycles and seconds
    duration = unpack_le(rx_list[2:])

    print "RX: " + buf2hex(rx)  
    print 
    print "=== Cycle count = " + str(duration) + " = " + str(duration/CPU_FREQUENCY) + " s ==="
    print 
    
    # Get result blocks
    c_comp = []
    for j in range(BLOCK_CNT):
        # get one block        
        ser.write("o")
        
        # read response
        rx = ser.read(BLOCK_SIZE + 2)
        rx_list = map(ord, rx)
        c_comp.extend(rx_list[:BLOCK_SIZE])
        
        print "c = "+ array2hex(rx_list[:BLOCK_SIZE])

    cCompN = unpack_le(c_comp)
    cRefN = unpack_le(c_ref)
    
    if cCompN == cRefN:
        print "[OK] Result correct"
    else:
        print "[FAILED]"
        print "Got  : " + hex(cCompN)
        print "Exp't: " + hex(cRefN)
     
    print       

ser.close()
